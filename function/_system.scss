////
/// @group System
/// @author Victor Vincent
////

/// Config value getter (use _config)
/// @access private
/// @param {String}	$original	Config key to get the value for.
/// @return {Mixed}
@function _config-get($original) {

	@if (str-index('@', $original) == 1) {
		@return _config-get(_str-replace('@', ''));
	}

	@if map-has-key($_config-key-cache, $original) {
		@return map-get($_config-key-cache, $original);
	}

	$keys: _str-explode($original, '.');
	$result: $_config;

	@each $key in $keys {
		$key: $key + '';
		@if map-has-key($result, $key) {
			$result: map-get($result, $key);
		} @else {
			@warn 'No such config key: ' + $original;
			@return $original;
		}
	}

	$_config-key-cache: map-merge($_config-key-cache, (
		$original: $result
	)) !global;

	@return $result;
}

/// Config value setter (use _config)
/// @access private
/// @param {String}	$original	Config key to set the value for.
/// @param {Mixed}	$value		Value of the key.
/// @return {Null}
@function _config-set($original, $value) {
	// Clear cache
	$_config-key-cache: $_empty-map;

	$keys: _str-explode($original, '.');
	$keysNum: length($keys);
	$pieces: ();
	$tempConfig: $_config;
	$result: null;
	$nextPiece: null;

	@each $key in $keys {

		// No such key yet? Then create it
		@if map-has-key($tempConfig, $key) == false {
			@if type-of($tempConfig) != map {
				$tempConfig: $_empty-map;
			}
			$tempConfig: map-merge($tempConfig, (
				$key: $_empty-map
			));
			$tempConfig: map-get($tempConfig, $key);
		} @else {
			$v: map-get($tempConfig, $key);
			@if type-of($v) != map {
				$v: $_empty-map;
			}
			$tempConfig: $v;
		}

		// Store pieces
		$pieces: append($pieces, $tempConfig);
	}

	// Prepend original config object
	$pieces: join($_config, $pieces);

	// Merge old and new values if both are a map
	$old-value: nth($pieces, length($pieces));
	@if type-of($old-value) == map and type-of($value) == map {
		$value: map-merge($old-value, $value);
	}

	$i: $keysNum;
	@while $i > 0 {
		$key: nth($keys, $i);
		$piece: nth($pieces, $i);
		$piece: if(type-of($piece) != map, map-merge((), ()), $piece);

		@if $i == $keysNum {
			$nextPiece: map-merge($piece, ($key: $value));
		} @else {
			$nextPiece: map-merge($piece, ($key: $nextPiece));
		}

		$result: $nextPiece;
		$i: $i - 1;
	}

	$_config: $result !global;

	@return null;

}

/// Config value getter/setter
/// @access public
/// @param {String}	$original				Config key to set the value for.
/// @param {Mixed}	$value		[false]		Value of the key.
/// @return {string}
@function _config($key, $value: $_setter-placeholder) {
	@if $value == $_setter-placeholder {
		@return _config-get($key);
	}
	@return _config-set($key, $value);
}

/// Converts pixel value into em according to a $context value.
/// @access private
/// @param {Number}	$pixels			Pixel value
/// @param {Number}	$context [10]	Context value
/// @return {Null}
@function _em($pixels, $context: 10) {
	@if (unitless($pixels)) {
		$pixels: $pixels * 1px;
	}
	@if (unitless($context)) {
		$context: $context * 1px;
	}
	@return $pixels / $context * 1em;
}